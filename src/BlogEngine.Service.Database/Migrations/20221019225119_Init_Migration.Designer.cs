// <auto-generated />
using System;
using BlogEngine.Service.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BlogEngine.Service.Database.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20221019225119_Init_Migration")]
    partial class Init_Migration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BlogEngine.Service.Database.Entities.ArticleEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("desc");

                    b.Property<string>("Header")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("header");

                    b.Property<long?>("LeadingImageId")
                        .HasColumnType("bigint")
                        .HasColumnName("leading_image_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<long>("UserInfoId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_info_id");

                    b.HasKey("Id");

                    b.HasIndex("LeadingImageId");

                    b.HasIndex("UserInfoId")
                        .IsUnique()
                        .HasDatabaseName("IX_articles_user_info_id");

                    b.ToTable("articles");
                });

            modelBuilder.Entity("BlogEngine.Service.Database.Entities.CommentEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ArticleId")
                        .HasColumnType("bigint")
                        .HasColumnName("article_id");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<long>("UserInfoId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_info_id");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId")
                        .HasDatabaseName("IX_comments_article_id");

                    b.HasIndex("UserInfoId")
                        .HasDatabaseName("IX_comments_user_info_id");

                    b.ToTable("comments");
                });

            modelBuilder.Entity("BlogEngine.Service.Database.Entities.ImageEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Base64")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("base64");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<int>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("height");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<int>("Width")
                        .HasColumnType("integer")
                        .HasColumnName("width");

                    b.HasKey("Id");

                    b.ToTable("image_strings");
                });

            modelBuilder.Entity("BlogEngine.Service.Database.Entities.UserEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pwd_hash");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.Property<long>("UserInfoId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_info_id");

                    b.HasKey("Id");

                    b.HasIndex("UserInfoId")
                        .IsUnique()
                        .HasDatabaseName("IX_users_user_info_id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("BlogEngine.Service.Database.Entities.UserInfoEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<long>("ImageId")
                        .HasColumnType("bigint")
                        .HasColumnName("image_id");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("nickname");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated");

                    b.HasKey("Id");

                    b.HasIndex("FirstName")
                        .HasDatabaseName("IX_user_info_first_name");

                    b.HasIndex("ImageId");

                    b.HasIndex("LastName")
                        .HasDatabaseName("IX_user_info_last_name");

                    b.HasIndex("Nickname")
                        .IsUnique()
                        .HasDatabaseName("IX_user_info_nickname");

                    b.ToTable("user_info");
                });

            modelBuilder.Entity("BlogEngine.Service.Database.Entities.ArticleEntity", b =>
                {
                    b.HasOne("BlogEngine.Service.Database.Entities.ImageEntity", "LeadingImage")
                        .WithMany()
                        .HasForeignKey("LeadingImageId");

                    b.HasOne("BlogEngine.Service.Database.Entities.UserInfoEntity", "UserInfo")
                        .WithMany()
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LeadingImage");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("BlogEngine.Service.Database.Entities.CommentEntity", b =>
                {
                    b.HasOne("BlogEngine.Service.Database.Entities.ArticleEntity", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_articles_comments");

                    b.HasOne("BlogEngine.Service.Database.Entities.UserInfoEntity", "UserInfo")
                        .WithMany()
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("BlogEngine.Service.Database.Entities.UserEntity", b =>
                {
                    b.HasOne("BlogEngine.Service.Database.Entities.UserInfoEntity", "UserInfo")
                        .WithMany()
                        .HasForeignKey("UserInfoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("BlogEngine.Service.Database.Entities.UserInfoEntity", b =>
                {
                    b.HasOne("BlogEngine.Service.Database.Entities.ImageEntity", "Image")
                        .WithMany()
                        .HasForeignKey("ImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Image");
                });

            modelBuilder.Entity("BlogEngine.Service.Database.Entities.ArticleEntity", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
